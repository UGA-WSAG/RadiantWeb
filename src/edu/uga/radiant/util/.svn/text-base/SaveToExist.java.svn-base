/*
 * Copyright (c) 2009 Srikalyan Swayampakula. All rights reserved.
 * 
 *   Author : Srikalyan Swayampakula .
 *   Name of the File : SaveToWSDL.java .
 *   Created on : Jun 4, 2009 at 2:05:52 PM .
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 * 
 *  1. Redistributions of source code must retain the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer.
 *  2. Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *  3. Neither the name of the University of Georgia nor the names
 *     of its contributors may be used to endorse or promote
 *     products derived from this software without specific prior
 *     written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.uga.radiant.util;

/**
 *
 * @author Srikalyan Swayampakula 
 */
import edu.uga.radiant.annotation.AnnotateWSDL;
import edu.uga.radiant.backend.*;
import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import org.exist.xmldb.DatabaseInstanceManager;
import java.io.*;
import edu.uga.radiant.util.RadiantToolConfig;

public class SaveToExist
{
    private static RadiantToolConfig toolconfig = new RadiantToolConfig();

    public static String SaveFileToExist(String fileName)
    {
        Collection collection = null;
        String msg = "";
        try
        {
            System.out.println("in save");
            String driver = RadiantToolConfig.getDbDriver();//"org.exist.xmldb.DatabaseImpl";
            String url = RadiantToolConfig.getDbUrl();
            String existConfig = toolconfig.getExistConfiguration();
            
            String filePath = toolconfig.getTempLocation()+fileName;
            AnnotateWSDL.updateWSDLToFile(filePath);
            

            // initialize database driver
            Class cl = Class.forName(driver);
            Database database = (Database) cl.newInstance();
            //database.setProperty("create-database", "true");
            //database.setProperty("configuration",existConfig);
            DatabaseManager.registerDatabase(database);

            // get the collection
          //  col = DatabaseManager.getCollection(URI);
          //  this.URI = URI;
          //  String driver = "org.apache.xindice.client.xmldb.DatabaseImpl";
          //  Class connectionClass = Class.forName(driver);

          //  Database database = (Database) connectionClass.newInstance();
          //  DatabaseManager.registerDatabase(database);
            //collection = DatabaseManager.getCollection("xmldb:xindice://localhost:8080/db/RadiantWeb");
//            collection = DatabaseManager.getCollection("xmldb:exist:///db", "admin", "23121986");//"xmldb:exist://localhost:8086/exist/xmlrpc/db/RadiantWeb");
            collection = DatabaseManager.getCollection("xmldb:exist://localhost:8086/exist/xmlrpc/db/RadiantWeb");

            //String readFileFromDisk = readFileFromDisk(filePath);

            //XMLResource document = (XMLResource) collection.createResource(null, "XMLResource");
            //document.setContent(readFileFromDisk);
            //collection.storeResource(document);
            File f = new File(filePath);
            // create new XMLResource
		XMLResource document = (XMLResource)collection.createResource(f.getName(), "XMLResource");
		document.setContent(f);
		System.out.print("storing document " + document.getId() + "...");
		collection.storeResource(document);
		
            System.out.println("Document " + filePath + " inserted");
            msg = "Success: File saved to ExistDB";
        }
        catch (XMLDBException e)
        {

            String ms = "Erro: XMLDB Exception - "+e.errorCode;
            return ms;
            //System.err.println("XML:DB Exception occured " + e.errorCode);
            //if (collection != null)
            //{
            //    collection.close();
            //}
            //throw e;
        }
        catch(Exception e){
            return "Error: Exception Occured";
        }
        //DatabaseInstanceManager manager = (DatabaseInstanceManager)
        //collection.getService("DatabaseInstanceManager", "1.0");
        //manager.shutdown();
        //if (collection != null)
        //{
        //    collection.close();
        //}
        return msg;
    }

    /*public static String readFileFromDisk(String fileName) throws Exception
    {
        File file = new File(fileName);
        FileInputStream insr = new FileInputStream(file);

        byte[] fileBuffer = new byte[(int) file.length()];

        insr.read(fileBuffer);
        insr.close();

        return new String(fileBuffer);
    }*/

}

