/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package edu.uga.radiant.util;

import java.io.*;
import java.util.Properties;


/**
 *
 * @author Chaitu
 */
public class RadiantToolConfig {

    private static String dbDriver;

    private static String dbUrl;

    private static String dbName;

    private static String dbUserId;

    private static String dbPassword;

    private static final String propertyFile = "/Users/Chaitu/NetBeansProjects/Radiant/src/java/edu/uga/radiant/util/RadiantProperties.properties";

    private static String operationConcept;

    private static String parameterConcept;

    private static String definitionURI;
    
    private static String descriptionURI;

    private static String wsdlUrl;
    
    private static String tempLocation;
    
    private static String existConfiguration;
    
    private static String stopwordsPath;
    
    public String getStopWordsPath(){
        return stopwordsPath;
    }
    
    public String getDescriptionURI(){
        return descriptionURI;
    }
    
    public String getExistConfiguration(){
        return existConfiguration;
    }

    public String getWsdlUrl(){
        return wsdlUrl;
    }

    public void setWsdlUrl(String url){
        wsdlUrl=url;
    }

    public String getDefinitionURI(){
        return definitionURI;
    }

    public String getOperationConcept(){
        return operationConcept;
    }

    public String getParameterConcept(){
        return parameterConcept;
    }

    public static String getDbDriver()
    {
        return dbDriver;
    }
    public static String getDbUrl()
    {
        return dbUrl;
    }
    public static String getDbUserId()
    {
        return dbUserId;
    }
    public static String getDbPassword()
    {
        return dbPassword;
    }
    public static String getDbName()
    {
        return dbName;
    }
    
    public String getTempLocation(){
        return tempLocation;
    }
    
    public void setExistConfiguration(String config){
        RadiantToolConfig.existConfiguration = config;
    }
            
            
    public void setTempLocation(String location){
        RadiantToolConfig.tempLocation = location;
    }
    
    public void setOperationConcept(String operationConcept){
        RadiantToolConfig.operationConcept = operationConcept;
    }
    public void setParameterConcpet(String parameterConcept){
        RadiantToolConfig.operationConcept = parameterConcept;
    }
    public void setDbUrl(String dbUrl)
    {
        RadiantToolConfig.dbUrl = dbUrl;
    }
    public void setDbName(String dbName)
    {
        RadiantToolConfig.dbName = dbName;
    }
    public void setDbUserId(String dbUserId)
    {
        RadiantToolConfig.dbUserId = dbUserId;
    }
    public void setDbPassword(String dbPassword)
    {
        RadiantToolConfig.dbPassword = dbPassword;
    }
    public void setDbDriver(String dbDriver)
    {
        RadiantToolConfig.dbDriver = dbDriver;
    }
    public void setDefinitionURI(String definitionURI){
        RadiantToolConfig.definitionURI = definitionURI;
    }
    
    public void setDescriptionURI(String descriptionURI){
        RadiantToolConfig.descriptionURI = descriptionURI;
    }


    public RadiantToolConfig(){//String property){
           try{

                File file = new File(propertyFile);
                //System.out.println("The abs path is : "+file.getAbsolutePath());
                //Creating an object of java.util.Properties
                Properties prop = new Properties();
                //Loading the properties file as a Input file
                prop.load(new FileInputStream(propertyFile));
                //Using getProperty method defined in java.util.Properties
                //to read the value for a particular key
                //dbUrl = prop.getProperty("db.url");
                dbDriver = prop.getProperty("db.driver");
                //dbUserId = prop.getProperty("db.userid");
                //dbPassword = prop.getProperty("db.password");
                //dbName = prop.getProperty("db.name");
                operationConcept = prop.getProperty("operation.concept");
                parameterConcept = prop.getProperty("parameter.concept");
                definitionURI = prop.getProperty("definition.uri");
                wsdlUrl = prop.getProperty("wsdl.url");
                tempLocation = prop.getProperty("temp.location");
                existConfiguration=prop.getProperty("exist.configuraion");
                descriptionURI=prop.getProperty("description.uri");
                stopwordsPath=prop.getProperty("stopword.path");
           }
           catch(Exception e)
           {
                e.printStackTrace();
                System.out.println( "Property-Value pair could not be added\nPlease check if the .properties file exists at the said path..!!");
           }
    }


}
