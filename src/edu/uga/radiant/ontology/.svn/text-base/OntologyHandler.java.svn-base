/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uga.radiant.ontology;

import edu.uga.radiant.util.RadiantToolConfig;
import java.io.File;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.UnloadableImportException;
import java.lang.Comparable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLLiteral;
import org.semanticweb.owlapi.util.SimpleIRIMapper;
import org.semanticweb.owlapi.vocab.OWLRDFVocabulary;

/**
 *
 * @author Chaitu
 */
public class OntologyHandler {
    
    private Set<String> paths = new HashSet();
    
    private static OWLOntology ontology;
    
    private static Ontologies ontologies = new Ontologies();
    
    private static OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
    
    //private 
    
    /*public void OntologyHandler(String path){
        
        Map<String, OWLOntology> map = OntologyHandler.ontologies.getOntologies();
        if(map != null){
            

            if(map.containsKey(path)){
                ontology = OntologyHandler.ontologies.getOntology(path);
            }
            else
            {
                try {
                    ontology = loadOntology(path);
                    ontologies.addOntology(path, ontology);
                } catch (OWLOntologyCreationException ex) {
                    Logger.getLogger(OntologyHandler.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(OntologyHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
       }
       else{
            
       }
    }
    */
    
    public static OWLOntologyManager getOWLOntologyManager(){
        return manager;
    }
    
    public OWLOntology getOntology(){
        return ontology;
    }
    
    public Map<String,OWLOntology> loadOntologyFromLocalImport(String owlPath,Map<String,String> imports){
        Map<String, OWLOntology> onto = new HashMap<String,OWLOntology>();
        
        OWLOntology ont = null;
        try{
        Iterator<String> it = imports.keySet().iterator();
        while(it.hasNext()){
            String ontIRI = it.next();
            String ontPath = imports.get(ontIRI);
            File file = new File(ontPath);
            SimpleIRIMapper mapper = new SimpleIRIMapper(IRI.create(ontIRI),IRI.create(file));
            manager.addIRIMapper(mapper);
        }
        if(owlPath.indexOf("http:")>0){
            ontology = manager.loadOntologyFromOntologyDocument(IRI.create(owlPath));//IRI.create("http://purl.obolibrary.org/obo/obi.owl"));
            String s = "sucess "+owlPath;
            onto.put(s, ont);
            return onto;    
        }
        else
        {
            File file = new File(owlPath);
            ont = manager.loadOntologyFromOntologyDocument(file);//IRI.create("http://purl.obolibrary.org/obo/obi.owl"));
            String s = "success "+owlPath;
            onto.put(s, ont);
            return onto;
            //System.out.println("After the load ontology "+ontology);
        }
        
        }
        catch(UnloadableImportException e){
            
          System.out.println("unloadable import exp "+e.getImportsDeclaration().getIRI());//System.exit(0);
          String msg = "importerror "+e.getImportsDeclaration().getIRI();
          onto.put(msg, null);
          return onto;
          //e.printStackTrace();
        }catch (OWLOntologyCreationException ex) {
                    Logger.getLogger(OntologyHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return onto;
    }
    
    public Map<String, OWLOntology> loadOntology(String owlpath)
    {
        Map<String, OWLOntology> ontolo = new HashMap<String,OWLOntology>();
        //reasonerfactory = new StructuralReasonerFactory();
        manager = OWLManager.createOWLOntologyManager();
        //factory = manager.getOWLDataFactory();
        System.out.println("In the load ontology : "+owlpath);
        
        OWLOntology ont = null;
        try {
        if(owlpath.contains("http:")){
            ontology = manager.loadOntologyFromOntologyDocument(IRI.create(owlpath));//IRI.create("http://purl.obolibrary.org/obo/obi.owl"));
            String s = "success "+owlpath;
            ontolo.put(s, ontology);
            return ontolo;    
        }
        else
        {
            File file = new File(owlpath);
            ontology = manager.loadOntologyFromOntologyDocument(file);//IRI.create("http://purl.obolibrary.org/obo/obi.owl"));
            String s = "success "+owlpath;
            Comparable [] omOnt = {s,ont};
            ontolo.put(s, ontology);
            return ontolo;
            //System.out.println("After the load ontology "+ontology);
        }
        //ontologies = manager.getOntologies();
        //System.out.println("Ontology loaded is : "+ontology);
        //reasoner = reasonerfactory.createNonBufferingReasoner(ontology);
        }
        //

        catch(UnloadableImportException e){
            
          System.out.println("unloadable import exp "+e.getImportsDeclaration().getIRI());//System.exit(0);
          String msg = "importerror "+e.getImportsDeclaration().getIRI();
          ontolo.put(msg, null);
          return ontolo;
          //e.printStackTrace();
        }catch (OWLOntologyCreationException ex) {
                    Logger.getLogger(OntologyHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    
    /**.
     * Method to get the top level classes in the hierarchy uses a reasoner to do this
     * @return Set of top level classes
     */
    /*public Set<OWLClass> getTopClasses() {
        //OWLReasoner reasoner = reasonerfactory.createNonBufferingReasoner(ontology);
        Set<OWLClass> classes = new HashSet<OWLClass>();
        //OWLClass thing = factory.getOWLClass(IRI.create("http://www.w3.org/2002/07/owl#Thing"));
        //OWLClass root = reasoner.getTopClassNode().getRepresentativeElement();
        //System.out.println("The root node is : "+getLabel(root));

        //Set<OWLClass> subcls = new HashSet<OWLClass>();

        //subcls = reasoner.getSubClasses(root, true).getFlattened();

        //return subcls;
        
        //classes = ontology.getClassesInSignature();
        Set<OWLClass> subclasses = new HashSet<OWLClass>();
        for(OWLOntology ont : ontologies){
            for(OWLClass cls : ont.getClassesInSignature()){
                classes.add(cls);
            }
        }
        for ( OWLClass cls : classes ) {reasoner.getSuperClasses(cls, true);//.getSubClasses(cls, true)
            for ( OWLClass sbcls : reasoner.getSubClasses(cls, true).getFlattened() ) { // Get all subclasses
                subclasses.add(sbcls);
            }
        }

        for ( OWLClass cls : subclasses ) { // Removing the sub classes
            classes.remove(cls);
        }
        for ( OWLClass cls : classes ) {
 //           out.println("The top classes are : "+cls);
        }

        //out.println(" The number of top classes are : "+classes.size());
        return classes;
    }*/
    
    
    private static RadiantToolConfig conf = new RadiantToolConfig();

    //private static OWLOntologyManager manager;
    
    /* Given Ontology gets all the subclasses of an operation URI
     * @param ont OWLOntology
     * @returns the descendents of Operation URI(i.e uri of concept related to Web service operation) in the Ontology
     *
     * */
    public static Set<OWLClass> getOperationConcetps(OWLOntology ont){

        String opConceptURI = conf.getOperationConcept();
        OWLDataFactory owlDataFactory = ont.getOWLOntologyManager().getOWLDataFactory();
        OWLClass opConcept = owlDataFactory.getOWLClass(IRI.create(opConceptURI));
        Set<OWLClass> conceptsList = getSubClass(opConcept,ont);//new ArrayList<OWLClass>();
        return conceptsList;

    }

    /** Given Ontology gets all the subclasses of an operation URI
     *  @param ont OWLOntology
     *  @returns the descendents of Operation URI(i.e uri of concept related to Web service operation) in the Ontology
     *
     * */
    public static Set<OWLClass> getParameterConcetps(OWLOntology ont){

        String paramConceptURI = conf.getParameterConcept();
        OWLDataFactory owlDataFactory = ont.getOWLOntologyManager().getOWLDataFactory();
        OWLClass opConcept = owlDataFactory.getOWLClass(IRI.create(paramConceptURI));
        Set<OWLClass> conceptsList = getSubClass(opConcept,ont);//new ArrayList<OWLClass>();
        return conceptsList;

    }

    /*
     * Given OWLClass and OWLOntology gives the set all descendents of that class
     * @param cls OWLClass
     * @param ont OWLOntology
     * @returns the Set of descendent classes of cls
     * */
    public static Set<OWLClass> getSubClass(OWLClass cls,OWLOntology ont){

        Set<OWLClass> subCls = new HashSet<OWLClass>();
        Set<OWLClass> localCopy = new HashSet<OWLClass>();
        Set<OWLOntology> ontologies = ont.getOWLOntologyManager().getOntologies();
        for(OWLOntology o : ontologies)
        {
            Set<OWLClassExpression> set = cls.getSubClasses(o);
            for(OWLClassExpression oce : set){
                if(oce != null)
                {
                    OWLClass cls1 = oce.asOWLClass();
                    Set<OWLClass> list = getSubClass(cls1,o);
                    subCls.add(cls1);
                    subCls.addAll(list);
                    localCopy.add(cls1);
                }
            }
        }
        return subCls;
    }

    /**
     * Given an OWLClass cls and Ontology ont gets the description of the OWLClass even if the OWLClass
     * is not there in ont but present in some of its imported ontologies. It makes use of getDescription
     * @param cls
     * @param ont
     * @return 
     */
    public static String getOntologyConceptDescription(OWLClass cls, OWLOntology ont){
        String ontTermDesc = OntologyHandler.getDescription(cls, ont);
            if(ontTermDesc == null)
            {
               Set<OWLOntology> ontologies = ont.getOWLOntologyManager().getOntologies();
               //System.out.println("Ontologies : "+ontologies);
                for(OWLOntology o : ontologies)
                {
                    if(ontTermDesc == null){
                        ontTermDesc = OntologyHandler.getDescription(cls, o);
                    }
                }
                
            }
            

        return ontTermDesc;        
    }

    /**
     * Given an OWLClass and the Ontology gets the definition of the OWLClass only if it is present
     * in the ontology (Used internally for getting the description ) 
     * @param cls
     * @param ont
     * @return 
     */
    private static String getDescription(OWLClass cls, OWLOntology ont){
        String description = null;
        RadiantToolConfig conf = new RadiantToolConfig();
        String descURI = conf.getDescriptionURI();
        OWLAnnotationProperty desc = manager.getOWLDataFactory().getOWLAnnotationProperty(IRI.create(descURI));
        OWLAnnotationProperty rdfDesc = manager.getOWLDataFactory().getOWLAnnotationProperty(OWLRDFVocabulary.RDF_DESCRIPTION.getIRI());
        
        for (OWLAnnotation annotation : cls.getAnnotations(ont, rdfDesc))
        {
            if (annotation.getValue() instanceof OWLLiteral) {
                OWLLiteral val = (OWLLiteral) annotation.getValue();
                if (val.hasLang("en")) {
                    description = val.getLiteral();
                }
            }
        }
        if (description == null){
            Set<OWLAnnotation> annots = cls.getAnnotations(ont,desc);
            for(OWLAnnotation an : annots){
                if(an.getValue() instanceof OWLLiteral)
                {

                    OWLLiteral value = (OWLLiteral) an.getValue();
                    description = value.getLiteral();
                }
            }

        }
        
        return description;
    }

    
    
    /**
     * Given an OWLClass cls and Ontology ont gets the definition of the OWLClass even if the OWLClass
     * is no there in ont but present in some of its imported ontologies. It makes use of getDeinition
     * method.
     * @param cls
     * @param ont
     * @return 
     */
    
    public static String getOntologyDefinition(OWLClass cls,OWLOntology ont){
        
        String ontTermDef = OntologyHandler.getDefinition(cls, ont);
            if(ontTermDef == null)
            {
               Set<OWLOntology> ontologies = ont.getOWLOntologyManager().getOntologies();
               //System.out.println("Ontologies : "+ontologies);
                for(OWLOntology o : ontologies)
                {
                    if(ontTermDef == null){
                        ontTermDef = OntologyHandler.getDefinition(cls, o);
                    }
                }
                
            }
            

        return ontTermDef;

    }
    
    
    /**
     * Given an OWLClass and the Ontology gets the definition of the OWLClass only if it is present
     * in the ontology
     * @param cls
     * @param ont
     *
     * */
    private static String getDefinition(OWLClass cls,OWLOntology ont){

        String definition=null;
        RadiantToolConfig conf = new RadiantToolConfig();
        String defURI = conf.getDefinitionURI();
        OWLAnnotationProperty def = manager.getOWLDataFactory().getOWLAnnotationProperty(IRI.create(defURI));//ont.getOWLOntologyManager().getOWLDataFactory().getOWLAnnotationProperty(IRI.create(defURI));
        OWLAnnotationProperty isdefby = manager.getOWLDataFactory().getOWLAnnotationProperty(OWLRDFVocabulary.RDFS_IS_DEFINED_BY.getIRI());//ont.getOWLOntologyManager().getOWLDataFactory().getOWLAnnotationProperty(OWLRDFVocabulary.RDFS_IS_DEFINED_BY.getIRI());
        
        //if(ont.containsClassInSignature(cls.getIRI()))
        //{
            //System.out.println(getLabel(cls,ont)+" Present in ontology");
            for (OWLAnnotation annotation : cls.getAnnotations(ont, isdefby))
            {
                if (annotation.getValue() instanceof OWLLiteral) {
                    OWLLiteral val = (OWLLiteral) annotation.getValue();
                    if (val.hasLang("en")) {
                        //System.out.println(cls + " -> " + val.getLiteral());
                        definition = val.getLiteral();
                    }
                }
            }
            //System.out.println("The defintio is : "+definition);
            if (definition == null){
                Set<OWLAnnotation> annots = cls.getAnnotations(ont,def);
                //System.out.println(annots);
                //if(annots.isEmpty())
                //    System.out.println(cls.getAnnotations(ont));
                //if(getLabel(cls,ont).equalsIgnoreCase("obsolescence reason specification"))
                //    System.out.println("The size of annotation list is : "+annots.size());
            //if (annots.size() != 0)
            //System.out.println("Label : "+label);//"The annotations for "+cls+" are \n"+annots+"\n");
                for(OWLAnnotation an : annots){
                //if(an.getProperty().equals(def)){
                    if(an.getValue() instanceof OWLLiteral)
                    {
                        
                        OWLLiteral value = (OWLLiteral) an.getValue();
                        definition = value.getLiteral();
                        //System.out.println("matched "+definition);
                    }
                //}
                }

            }
        //}else
        //{
        //    System.out.println("\n"+getLabel(cls,ont)+" Not Present in ontology");
        //    Set<OWLOntology> onts = manager.getOntologies();
        //    for(OWLOntology onto : onts){
        //        if(onto.containsClassInSignature(cls.getIRI())){
        //            System.out.println(onto);
        //        }
        //    }
        //}        
        
//OWLRDFVocabulary.
        //System.out.println("The label is :"+label+" "+cls.getAnnotations(ont, label));
        return definition;
        
    }

    /**
     * Gets the label for the particular owlclass cls in a given OWLOntology onto
     * @param cls OWLClass
     * @param onto OWLOntology
     * @return label for the OWLClass
     */
    public static String getLabel(OWLClass cls,OWLOntology onto)
    {
        OWLDataFactory factory = onto.getOWLOntologyManager().getOWLDataFactory();
        Set<OWLOntology> ontologies = onto.getOWLOntologyManager().getOntologies();
        String value = null;
        OWLAnnotationProperty label = factory.getOWLAnnotationProperty(OWLRDFVocabulary.RDFS_LABEL.getIRI());

        Set<OWLAnnotation> ann = cls.getAnnotations(onto, label);
        for(OWLAnnotation an : ann){
            value = an.getValue().toString().trim();
            break;
        } //for
        boolean set = false;
        if(value == null) {
            for(OWLOntology ont : ontologies)
            {
                if(ont.containsClassInSignature(cls.getIRI())){
                    Set<OWLAnnotation> ano = cls.getAnnotations(ont,label);
                    for(OWLAnnotation a:ano)
                    {
                        set = true;
                        value = a.getValue().toString();//getAnnotationValue().toString();
                    } //for

                } //if

            } //for
            if(!set)
                value = cls.getIRI().getFragment();//toStringID();
        } //if
        if(value.contains("^^xsd:string")){
            value = value.replace("^^xsd:string","");
        } //if
        else
        if (value.contains("@en")){
            value = value.replace("@en", "");
        } //if
        value = value.replace("\"", "");
        return value;
    } //getLabel

    
    
    
    
    

    public static void main(String [] args){
        
        OntologyHandler handler = new OntologyHandler();
        Map<String, OWLOntology> ontology = handler.loadOntology("/Users/Chaitu/OBI/webService_withdescriptions.owl");
        OWLOntology ont = handler.getOntology();
        OWLClass cls = ont.getOWLOntologyManager().getOWLDataFactory().getOWLClass(IRI.create("http://purl.obolibrary.org/obo/webService.owl#Class_0011"));
        System.out.println(OntologyHandler.getOntologyConceptDescription(cls, ont));
        
    }
    
    
}
